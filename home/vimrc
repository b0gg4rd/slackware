if v:progname =~? "evim"
  finish
endif

set nocompatible

" Vundle configuration
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" General
Plugin 'gmarik/Vundle.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'slim-template/vim-slim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'bling/vim-airline'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-surround'
Plugin 'mattn/emmet-vim'
Plugin 'mhinz/vim-signify'
Plugin 'raimondi/delimitmate'
Plugin 'timcharper/textile.vim'
Plugin 'majutsushi/tagbar'
Plugin 'easymotion/vim-easymotion'
Plugin 'godlygeek/tabular'

" Source revision
Plugin 'vcscommand.vim'
Plugin 'svn.vim'
Plugin 'tpope/vim-fugitive'

" C
Plugin 'octol/vim-cpp-enhanced-highlight'

" Docker
Plugin 'ekalinin/Dockerfile.vim'

" Python
Plugin 'hdima/python-syntax'

" Java
Plugin 'artur-shaik/vim-javacomplete2'
Plugin 'nlknguyen/vim-maven-syntax'
Plugin 'maven-ide'
Plugin 'tfnico/vim-gradle'
Plugin 'derekwyatt/vim-scala'

" ECMAScript
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'burnettk/vim-angular'

" CSS
Plugin 'wavded/vim-stylus'

" HTML
Plugin 'docunext/closetag.vim'
Plugin 'digitaltoad/vim-jade'

call vundle#end()

filetype plugin indent on

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup
set noundofile
set history=50
set cursorline
set ruler
set number
set showcmd
set incsearch
set visualbell
set autoindent
set laststatus=2
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Detect non-Unicode Xterms
if has("multi_byte")
  set encoding=utf-8
  if $TERM == "linux" || $TERM_PROGRAM == "GLterm"
    set termencoding=latin1
  endif
  if $TERM == "xterm" || $TERM == "xterm-color"
    let propv = system("xprop -id $WINDOWID -f WM_LOCALE_NAME 8s ' $0' -notype WM_LOCALE_NAME")
    if propv !~ "WM_LOCALE_NAME .*UTF.*8"
      set termencoding=latin1
    endif
  endif
endif

" NERDTree config
autocmd vimenter * NERDTree
let g:NERDTreeDirArrows = 0
let g:nerdtree_tabs_open_on_gui_startup = 1
let g:nerdtree_tabs_open_on_console_startup = 1
let g:nerdtree_tabs_no_startup_for_diff = 1
let g:nerdtree_tabs_open_on_new_tab = 1
let g:nerdtree_tabs_smart_startup_focus = 1

" Syntactic config
let g:syntastic_mode_map = { "mode" : "passive" }

" Javacomplete2 config
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

